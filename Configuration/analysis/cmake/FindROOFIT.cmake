#####################################
# cmake module for finding ROOFIT
# by Johannes Hauk
#####################################

SET( CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS TRUE )

SET( ROOFIT_FOUND FALSE )
MARK_AS_ADVANCED( ROOFIT_FOUND )


# include dirs
SET( ROOFIT_INCLUDE_DIR ROOFIT_INCLUDE_DIR-NOTFOUND )
MARK_AS_ADVANCED( ROOFIT_INCLUDE_DIR )

SET(ROOFITSYS "$ENV{ROOFITSYS}")

MESSAGE ( STATUS "ROOFITSYS: ${ROOFITSYS}")


IF ( NOT ROOFITSYS )

  IF( NOT ROOFIT_FIND_QUIETLY )
    MESSAGE( STATUS "no ROOFITSYS set" )
  ENDIF( NOT ROOFIT_FIND_QUIETLY )

ENDIF ( NOT ROOFITSYS )

MESSAGE( STATUS "ROOFIT_INCLUDE_DIR: ${ROOFIT_INCLUDE_DIR}" )

SET( ROOFIT_INCLUDE_DIR "${ROOFITSYS}include" )
SET( ROOFIT_LIB_DIR "${ROOFITSYS}lib" )
SET( ROOFIT_BIN_DIR "${ROOFITSYS}bin" )
MESSAGE( STATUS "  ROOFIT_INCLUDE_DIR: ${ROOFIT_INCLUDE_DIR}" )
MESSAGE( STATUS "  ROOFIT_LIB_DIR: ${ROOFIT_LIB_DIR}" )
MESSAGE( STATUS "  ROOFIT_BIN_DIR: ${ROOFIT_BIN_DIR}" )



IF( NOT ROOFIT_INCLUDE_DIR AND NOT ROOFIT_FIND_QUIETLY )
    MESSAGE( STATUS "Check for ROOFIT:"
        " -- failed to find ROOFIT include directory!!" )
ENDIF( NOT ROOFIT_INCLUDE_DIR AND NOT ROOFIT_FIND_QUIETLY )

# libraries
SET( ROOFIT_CONFIG_OUTPUT "-L${ROOFIT_LIB_DIR} -lRooFit -lRooFitCore -lRooStats -lHistFactory" )
STRING(REGEX MATCHALL "-l[a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9]*" ROOFIT_LIBS_STRINGS ${ROOFIT_CONFIG_OUTPUT})
STRING(REGEX REPLACE "-l" ";" ROOFIT_LIBS_NAMES ${ROOFIT_LIBS_STRINGS})


SET( ROOFIT_FINDLIB_FAILED FALSE )
MARK_AS_ADVANCED( ROOFIT_LIBS_NAMES ROOFIT_FINDLIB_FAILED )

FOREACH( libname ${ROOFIT_LIBS_NAMES} )
    SET( ROOFIT_LIB_${libname} ROOFIT_LIB_${libname}-NOTFOUND )

    FIND_LIBRARY( ROOFIT_LIB_${libname}
        NAMES ${libname}
        PATHS ${ROOFITSYS} ${ROOFIT_LIB_DIR}
        PATH_SUFFIXES lib
        NO_DEFAULT_PATH )

    IF( NOT ROOFIT_LIB_${libname} )
        SET( ROOFIT_FINDLIB_FAILED TRUE )
        IF( NOT ROOFIT_FIND_QUIETLY )
            MESSAGE( STATUS "Check for ROOFIT:"
                " -- failed to find ROOFIT ${libname} library!!" )
        ENDIF( NOT ROOFIT_FIND_QUIETLY )
    ELSE( NOT ROOFIT_LIB_${libname} )
        LIST( APPEND ROOFIT_LIBS ${ROOFIT_LIB_${libname}} )
        UNSET( ROOFIT_LIB_${libname} CACHE )
    ENDIF( NOT ROOFIT_LIB_${libname} )
ENDFOREACH( libname ${ROOFIT_LIBS_NAMES} )

# check if we need DL on this plattform and find full path to it
IF ( CMAKE_DL_LIBS )
  FIND_LIBRARY( DL_LIBS_FULLPATH NAMES ${CMAKE_DL_LIBS} )
  MARK_AS_ADVANCED(DL_LIBS_FULLPATH)
ENDIF ( CMAKE_DL_LIBS )

# set variables and display results
IF( ROOFIT_INCLUDE_DIR AND NOT ROOFIT_FINDLIB_FAILED )
    SET( ROOFIT_LIBRARIES ${ROOFIT_LIBS} ${DL_LIBS_FULLPATH} )
    MARK_AS_ADVANCED( ROOFIT_LIBRARIES ROOFIT_DEFINITIONS )
    MESSAGE( STATUS "Check for ROOFIT:   -- works" )

ELSE( ROOFIT_INCLUDE_DIR AND NOT ROOFIT_FINDLIB_FAILED )
    IF( ROOFIT_FIND_REQUIRED )
        MESSAGE( FATAL_ERROR "Check for ROOFIT:   -- failed!!" )
    ENDIF( ROOFIT_FIND_REQUIRED )
    MESSAGE( STATUS "Check for ROOFIT:"
                " -- failed!! will skip this package..." )
ENDIF( ROOFIT_INCLUDE_DIR AND NOT ROOFIT_FINDLIB_FAILED )

MESSAGE(STATUS "--------------- ROOFIT SUMMARY ----------------")
MESSAGE(STATUS "ROOFIT_INCLUDE_DIR: " ${ROOFIT_INCLUDE_DIR} )
MESSAGE(STATUS "ROOFIT_LIBRARIES:   " "${ROOFIT_LIBRARIES}" )
MESSAGE(STATUS "ROOFIT_DEFINITIONS: " ${ROOFIT_DEFINITIONS} )
MESSAGE(STATUS "-----------------------------------------------")



